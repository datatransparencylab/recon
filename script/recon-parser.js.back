var allCategories = [];
var allApps = [];
var allDomains = [];
var allTrackers = [];
var allNonTrackers = [];
var links = [];
var ready = false;
var jsonFile = "recon-app-leaks-ok.json";
var query = { trackers: true
            , domains: false
            , details: false
            , summary: true
            , platform: "All"
            , type: "AppTable"
            , category: "All"
            , groupcategory: "All"
            , nodata: false 
            }

var categoryGroups = {"LOCATION": "LOCATION", 
  "X_WP_DEVICE_ID": "IDENTIFIERS", 
  "MUID": "IDENTIFIERS", 
  "X_WP_ANID": "IDENTIFIERS", 
  "LASTNAME": "PERSONAL_INFO", 
  "ADVERTISERID": "IDENTIFIERS", 
  "ANDROIDID": "IDENTIFIERS", 
  "MACADDR": "IDENTIFIERS", 
  "SERIALNUMBER": "IDENTIFIERS",
  "FIRSTNAME": "PERSONAL_INFO", 
  "IMEI": "IDENTIFIERS", 
  "GENDER": "PERSONAL_INFO", 
  "ZIPCODE": "PERSONAL_INFO", 
  "USERNAME": "PERSONAL_INFO", 
  "PASSWORD": "PERSONAL_INFO",
  "EMAIL": "PERSONAL_INFO", 
  "CONTACTNAME": "PERSONAL_INFO", 
  "IDFA": "IDENTIFIERS", 
  "DEVICENAME": "IDENTIFIERS", 
  "CONTACTNUMBER": "PERSONAL_INFO", 
  "FULLNAME": "PERSONAL_INFO", 
  "ADDRESS": "PERSONAL_INFO", 
  "MEID": "IDENTIFIERS", 
  "DOB": "PERSONAL_INFO", 
  "PSWD": "PERSONAL_INFO", 
  "PROFILE": "PERSONAL_INFO", 
  "RELATIONSHIP": "PERSONAL_INFO"};

var categories = [ "LOCATION", "X_WP_DEVICE_ID", "MUID", "X_WP_ANID", 
  "LASTNAME", "ADVERTISERID", "ANDROIDID", "MACADDR", "SERIALNUMBER",
  "FIRSTNAME", "IMEI", "GENDER", "ZIPCODE", "USERNAME", "PASSWORD",
  "EMAIL", "CONTACTNAME", "IDFA", "DEVICENAME", "CONTACTNUMBER", 
  "FULLNAME", "ADDRESS", "MEID", "DOB", "PSWD", 
  "PROFILE", "RELATIONSHIP"];

var categoryGroupList = ["LOCATION", "IDENTIFIERS", "PERSONAL_INFO"];

var categoryGroupDescription = 
  {"LOCATION": "Information about your current location",
  "IDENTIFIERS": "Identifier that uniquely identifies the device",
  "PERSONAL_INFO": "Personal information"};

var urlParams;
(window.onpopstate = function () {
  var match,
      pl     = /\+/g,  // Regex for replacing addition symbol with a space
      search = /([^&=]+)=?([^&]*)/g,
      decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
      query  = window.location.search.substring(1);

  urlParams = {};
  while (match = search.exec(query))
    urlParams[decode(match[1])] = decode(match[2]);
})();

$(document).ready(function() {
  registerButtons();
  readJSON();
});

function getUrlFromQuery() {
    querystring = "?type=" + window.query.type;
    querystring += "&platform=" + window.query.platform;
    querystring += "&trackers=" + window.query.trackers;
    querystring += "&domains=" + window.query.domains;
    querystring += "&details=" + window.query.details;
    querystring += "&category=" + window.query.category;
    querystring += "&groupcategory=" + window.query.groupcategory;
    window.history.pushState("", "", "tool.html" + querystring);
}

function getQueryFromUrl() {
  var validQuery = false;
  if (urlParams["type"] != undefined) {
    window.query.type = urlParams["type"];
    if ((window.query.type == "AppTable") || 
        (window.query.type == "DomainTable") || 
        (window.query.type == "Categories") || 
        (window.query.type == "Bipartite")) {
      validQuery = true;
     
      window.query.summary = (urlParams["summary"] == "false") ? false : true;
      window.query.platform = (urlParams["platform"]) ? urlParams["platform"] : "All";
      window.query.trackers = (urlParams["trackers"] == "false") ? false : true;
      window.query.domains = (urlParams["domains"] == "true") ? true : false;
      window.query.details = (urlParams["details"] == "true") ? true : false;
      window.query.category = (urlParams["category"]) ? urlParams["category"] : "All";
      window.query.groupcategory = (urlParams["groupcategory"]) ? urlParams["groupcategory"] : "All";
    }
  }
  return validQuery;
}

function readJSON() {
  $.getJSON(jsonFile, function(apps) {
    for(var i = 0; i< apps.length; i++) {
      var myApp = {}; // store for the app being read

      // This can be stored directly
      myApp.aid = apps[i].aid;
      myApp.appName = apps[i].appName;
      myApp.score = apps[i].score;
      myApp.popularity = apps[i].popularity;
      myApp.platform = apps[i].platform;
      myApp.categories = []; // still a placeholder 
      myApp.categoryGroups = []; // still a placeholder 
      myApp.domains = []; // placeholder too

      // These below require a bit of processing
      var categories = apps[i].categories; // array
      // should be an array, but it's comma separated list so we did this trick!!!
      var categoriesLabels = apps[i].c_text.split(","); 

      var domains = apps[i].domains; // array
    
      // As we don't have a list of categories we build a global one by storing all the
      // categories detected in all the apps in allCategories
      for (var catIdx in categories) {
        cleanCatID = (categories[catIdx]).toUpperCase().replace(/-/g,"_");
        if (window.allCategories[cleanCatID] == null) {
          window.allCategories[cleanCatID] = {
            "description": categoriesLabels[catIdx].trim(),
            "ID": cleanCatID,
            "nApps": 1,
            "nTrackers": 0,
            "nNonTrackers": 0,
            "appList": [myApp.appName],
            "trackerList": [],
            "nonTrackerList": [],
            "categoryGroup": categoryGroups[cleanCatID],
            "arrayApps": [],
            "arrayTrackers": [],
            "arrayNonTrackers": []
          };
          platformKeys = ["All", "iOS", "Android", "Windows"]
          for (pk=0; pk < platformKeys.length; pk++) {
            window.allCategories[cleanCatID].arrayApps[platformKeys[pk]] = [];
            window.allCategories[cleanCatID].arrayTrackers[platformKeys[pk]]= [];
            window.allCategories[cleanCatID].arrayNonTrackers[platformKeys[pk]] = [];
          }
        }
        else {
          if (window.allCategories[cleanCatID].appList.indexOf(myApp.appName) == -1) {
            window.allCategories[cleanCatID].nApps++; 
            window.allCategories[cleanCatID].appList.push(myApp.appName);
          }
        }

        if (window.allCategories[cleanCatID].arrayApps[myApp.platform].indexOf(myApp.appName) == -1) {
          window.allCategories[cleanCatID].arrayApps[myApp.platform].push(myApp.appName);
          window.allCategories[cleanCatID].arrayApps["All"].push(myApp.appName + "(" + myApp.platform +")" );
        }
      }
      
      var domainInfo = []

      // The information in  the detil field is formatted with an HTML list that
      // includes some fields separated by an arrow -> other by commas, others
      // include the keyword tracking as free text. So all this magic is to
      // convert that presentation ready info to something properly structured 
      html = $.parseHTML(apps[i].detail)
      $("li", html).each(function (i, elem) {
        // Format is domain -> categry, category, category
        var splittedText = $(this).text().split("->");
        domainCategories = splittedText[0].split(","); // array of categories
        domainUrl = splittedText[1].trim(); // This is the domain

        // Structure to store the details of a domain, by default every one
        // is a third party and not a tracker
        var domainDetails = {
          primary: false,
          tracker: false,
          domainUrl: domainUrl
        };

        // If a domain is tracker is defined by including the word tracker
        // together with the URL, so we check for it and if it's found
        // we change tracker to true and remove the string from the domain
        var index = domainDetails.domainUrl.indexOf("Tracker");
        if(index != -1) {
          domainUrl = domainUrl.replace("Tracker","").trim(); 
          domainDetails.domainUrl = domainUrl;
          domainDetails.tracker = true;
        }

        // For the list of domains per app
        domainInfo[domainUrl] = domainDetails;

        // links
        link = {
          "app": myApp.appName,
          "domain": domainDetails.domainUrl,
          "platform": myApp.platform,
          "tracker": domainDetails.tracker,
          "categories": [],
          "categoryGroups": []
        }

        if(link.app.length > 30)
          link.app = link.app.substring(0,28)+"...";
        link.app = link.app + " (" + link.platform + ")";

        if (domainDetails.tracker) 
          window.allTrackers[domainDetails.domainUrl] = domainDetails;
        else
          window.allNonTrackers[domainDetails.domainUrl] = domainDetails;

        // To make the things a bit more complicated, the categories we 
        // obtained from the detail field are the description not the IDs
        // so we need to get first the ID linked to the description and 
        // only afterwards build our 2-d array:
        domainCategories.forEach(function(category){

          // Check categoryID based on the description
          var categoryID = Object.keys(window.allCategories).filter(function(key) {return window.allCategories[key].description === category.trim()})[0];

          if (categoryID == undefined){
            categoryID = Object.keys(window.allCategories).filter(function(key) {return window.allCategories[key].description.toLowerCase() === category.trim().toLowerCase()})[0];
            // even worse, some descriptions are not consistent because of the use of caps:
            // ZipCode, zipcode, UserName, username
          }

          link.categories.push(categoryID);

          if (link.categoryGroups.indexOf(categoryGroups[categoryID])  == -1)
            link.categoryGroups.push(categoryGroups[categoryID]);

          // Now with the ID we can add it
          if (myApp.categories[categoryID] == null) 
            myApp.categories[categoryID] = [];
          myApp.categories[categoryID][domainUrl] = domainDetails;

          // The remaining is to build the global 3D array that stores all the
          // information per-domain rather than per-app, is kind of duplication
          // but would make building visual staff easier. 
      
          // Firstly we check for the existence of the structure and create it 
          if (window.allDomains[domainUrl] == null) {
              window.allDomains[domainUrl] = []; 
              window.allDomains[domainUrl][categoryID] = [];
          } else if (window.allDomains[domainUrl][categoryID] == null) { 
            // The domain existed but not for this info, add
            window.allDomains[domainUrl][categoryID] = [];
          }

          // And then we fill-in the array 
          window.allDomains[domainUrl][categoryID][myApp.aid] = {};
          window.allDomains[domainUrl][categoryID][myApp.aid].aid = myApp.aid
          window.allDomains[domainUrl][categoryID][myApp.aid].appName =
            myApp.appName
          window.allDomains[domainUrl][categoryID][myApp.aid].score =
            myApp.score
          window.allDomains[domainUrl][categoryID][myApp.aid].popularity =
            myApp.popularity
          window.allDomains[domainUrl][categoryID][myApp.aid].platform =
            myApp.platform
          window.allDomains[domainUrl][categoryID][myApp.aid].tracker =
            domainDetails.tracker;
          window.allDomains[domainUrl][categoryID][myApp.aid].url = 
            domainUrl;
          window.allDomains[domainUrl][categoryID][myApp.aid].categoryGroup = 
            categoryGroups[categoryID];

          if (window.allCategories[categoryID] != null) {
            if (domainDetails.tracker) {
              if (window.allCategories[categoryID].trackerList.indexOf(domainUrl) == -1) {
                window.allCategories[categoryID].nTrackers++; 
                window.allCategories[categoryID].trackerList.push(domainUrl);
              }

              if (window.allCategories[categoryID].arrayTrackers[myApp.platform].indexOf(domainUrl) == -1)
                window.allCategories[categoryID].arrayTrackers[myApp.platform].push(domainUrl);

              if (window.allCategories[categoryID].arrayTrackers["All"].indexOf(domainUrl) == -1)
                window.allCategories[categoryID].arrayTrackers["All"].push(domainUrl);

            } else {
              if (window.allCategories[categoryID].nonTrackerList.indexOf(domainUrl) == -1) {
                window.allCategories[categoryID].nNonTrackers++; 
                window.allCategories[categoryID].nonTrackerList.push(domainUrl);
              }
              if (window.allCategories[categoryID].arrayNonTrackers[myApp.platform].indexOf(domainUrl) == -1)
                window.allCategories[categoryID].arrayNonTrackers[myApp.platform].push(domainUrl);
              if (window.allCategories[categoryID].arrayNonTrackers["All"].indexOf(domainUrl) == -1)
                window.allCategories[categoryID].arrayNonTrackers["All"].push(domainUrl);
            }
          }

        });
        window.links.push(link);
      }) // Finished processing the detail field

      myApp.domains = domainInfo;
      window.allApps[myApp.aid] = myApp;
    }

    window.ready = true;
    addCategoriesToDropdown();
    getExampleVisualizations();

    if (getQueryFromUrl()) {
      updateDropdowns();
      $("#get-results").click();
    }
  });
}

function getExampleVisualizations() {
  if (page == "app-details"){
    exampleQ = { trackers: true , domains: true , details: false , summary: false , platform: "All" , type: "AppTable", noData: false};
    var table = new AppTable();
    table.createTable("table-app-details", exampleQ);
    //createApplicationsTable("table-app-details", exampleQ);
  } else if (page == "summary"){
    exampleQ = { trackers: true , domains: true , details: false , summary: false , platform: "All" , type: "CategoryTable", noData: true};
    var tableCat = new CategoryTable("summary-table-categories", exampleQ);
    tableCat.createTable();
    exampleQ.summary = true;
    var appTable = new AppTable("summary-table-apps", exampleQ);
    appTable.createTable();
  } else if (page == "domains"){
      exampleQ = { trackers: true , domains: false , details: false , summary: true , platform: "All" , type: "domainTable", noData: true, groupcategory: "All", category: "All"};
      var tableDom = new DomainTable("domain-table", exampleQ);
      tableDom.createTable();
    } else if (page == "categories"){
      exampleQ = { trackers: true , domains: false , details: false , summary: false , platform: "All" , type: "domainTable", noData: false, groupcategory: "All", category: "All"};
      var tableC = new CategoryTable("categories-table", exampleQ);
      tableC.createTable();
    } else if (page == "iOS") {
      exampleQ = { trackers: true , domains: true , details: false , summary: false , platform: "iOS" , type: "Bipartite", noData: true, groupcategory: "All", category: "All"};
      var bp = new Bipartite("iOS-bipartite-all", exampleQ);
      bp.draw();

      exampleQ.groupcategory = "IDENTIFIERS";
      exampleQ.category = "All";
      var bp2 = new Bipartite("iOS-bipartite-id", exampleQ);
      bp2.draw();

      exampleQ.groupcategory = "PERSONAL_INFO";
      exampleQ.category = "All";
      var bp3 = new Bipartite("iOS-bipartite-pi", exampleQ);
      bp3.draw();

      exampleQ.groupcategory = "LOCATION";
      exampleQ.category = "All";
      var bp4 = new Bipartite("iOS-bipartite-location", exampleQ);
      bp4.draw();

      exampleQ = { trackers: true , domains: true , details: false , summary: true , platform: "iOS" , type: "AppTable", noData: false  };
      var tableApp = new AppTable("iOS-table-apps", exampleQ);
      tableApp.createTable();
    }
}
